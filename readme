ÊèèËø∞‰ø°ÊÅØüòäüòä

https://github.com/llvm/llvm-project
https://clang.llvm.org/get_started.html
http://releases.llvm.org/8.0.0/tools/clang/tools/extra/docs/clangd/DeveloperDocumentation.html#compiling-clangd
Getting Started: Building and Running Clang
This page gives you the shortest path to checking out Clang and demos a few options. This should get you up and running with the minimum of muss and fuss. If you like what you see, please consider getting involved with the Clang community. If you run into problems, please file bugs in LLVM Bugzilla.

Release Clang Versions
Clang is released as part of regular LLVM releases. You can download the release versions from https://llvm.org/releases/.

Clang is also provided in all major BSD or GNU/Linux distributions as part of their respective packaging systems. From Xcode 4.2, Clang is the default compiler for Mac OS X.

Building Clang and Working with the Code
On Unix-like Systems
If you would like to check out and build Clang, the current procedure is as follows:

Get the required tools.
See Getting Started with the LLVM System - Requirements.
Note also that Python is needed for running the test suite. Get it at: http://www.python.org/download
Standard build process uses CMake. Get it at: http://www.cmake.org/download
Check out the LLVM project:
Change directory to where you want the llvm directory placed.
git clone https://github.com/llvm/llvm-project.git
Build LLVM and Clang:
cd llvm-project
mkdir build (in-tree build is not supported)
cd build
cmake -DLLVM_ENABLE_PROJECTS=clang -G "Unix Makefiles" ../llvm
make
This builds both LLVM and Clang for debug mode.
Note: For subsequent Clang development, you can just run make clang.
CMake allows you to generate project files for several IDEs: Xcode, Eclipse CDT4, CodeBlocks, Qt-Creator (use the CodeBlocks generator), KDevelop3. For more details see Building LLVM with CMake page.
If you intend to use Clang's C++ support, you may need to tell it how to find your C++ standard library headers. In general, Clang will detect the best version of libstdc++ headers available and use them - it will look both for system installations of libstdc++ as well as installations adjacent to Clang itself. If your configuration fits neither of these scenarios, you can use the -DGCC_INSTALL_PREFIX cmake option to tell Clang where the gcc containing the desired libstdc++ is installed.
Try it out (assuming you add llvm/build/bin to your path):
clang --help
clang file.c -fsyntax-only (check for correctness)
clang file.c -S -emit-llvm -o - (print out unoptimized llvm code)
clang file.c -S -emit-llvm -o - -O3
clang file.c -S -O3 -o - (output native machine code)
Run the testsuite:
make check-clang
Using Visual Studio
The following details setting up for and building Clang on Windows using Visual Studio:

Get the required tools:
Git. Source code control program. Get it from: https://git-scm.com/download
CMake. This is used for generating Visual Studio solution and project files. Get it from: https://cmake.org/download/
Visual Studio 2015 or later
Python. It is used to run the clang test suite. Get it from: https://www.python.org/download/
GnuWin32 tools The Clang and LLVM test suite use various GNU core utilities, such as grep, sed, and find. The gnuwin32 packages are the oldest and most well-tested way to get these tools. However, the MSys utilities provided by git for Windows have been known to work. Cygwin has worked in the past, but is not well tested. If you don't already have the core utilies from some other source, get gnuwin32 from http://getgnuwin32.sourceforge.net/.
Check out LLVM and Clang:
git clone https://github.com/llvm/llvm-project.git
Note: Some Clang tests are sensitive to the line endings. Ensure that checking out the files does not convert LF line endings to CR+LF. If you're using git on Windows, make sure your core.autocrlf setting is false.

Run CMake to generate the Visual Studio solution and project files:
cd ..\.. (back to where you started)
mkdir build (for building without polluting the source dir)
cd build
If you are using Visual Studio 2017: cmake -DLLVM_ENABLE_PROJECTS=clang -G "Visual Studio 15 2017" -A x64 -Thost=x64 ..\llvm
-Thost=x64 is required, since the 32-bit linker will run out of memory.
To generate x86 binaries instead of x64, pass -A Win32.
See the LLVM CMake guide for more information on other configuration options for CMake.
The above, if successful, will have created an LLVM.sln file in the build directory.
Build Clang:
Open LLVM.sln in Visual Studio.
Build the "clang" project for just the compiler driver and front end, or the "ALL_BUILD" project to build everything, including tools.
Try it out (assuming you added llvm/debug/bin to your path). (See the running examples from above.)
See Hacking on clang - Testing using Visual Studio on Windows for information on running regression tests on Windows.
Using Ninja alongside Visual Studio
We recommend that developers who want the fastest incremental builds use the Ninja build system. You can use the generated Visual Studio project files to edit Clang source code and generate a second build directory next to it for running the tests with these steps:

Check out clang and LLVM as described above
Open a developer command prompt with the appropriate environment.
If you open the start menu and search for "Command Prompt", you should see shortcuts created by Visual Studio to do this. To use native x64 tools, choose the one titled "x64 Native Tools Command Prompt for VS 2017".
Alternatively, launch a regular cmd prompt and run the appropriate vcvarsall.bat incantation. To get the 2017 x64 tools, this would be:
"C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Auxiliary\Build\vcvarsall.bat" x64
mkdir build_ninja (or build, or use your own organization)
cd build_ninja
set CC=cl (necessary to force CMake to choose MSVC over mingw GCC if you have it installed)
set CXX=cl
cmake -GNinja ..\llvm
ninja clang This will build just clang.
ninja check-clang This will run the clang tests.
Clang Compiler Driver (Drop-in Substitute for GCC)
The clang tool is the compiler driver and front-end, which is designed to be a drop-in replacement for the gcc command. Here are some examples of how to use the high-level driver:

$ cat t.c
#include <stdio.h>
int main(int argc, char **argv) { printf("hello world\n"); }
$ clang t.c
$ ./a.out
hello world
The 'clang' driver is designed to work as closely to GCC as possible to maximize portability. The only major difference between the two is that Clang defaults to gnu99 mode while GCC defaults to gnu89 mode. If you see weird link-time errors relating to inline functions, try passing -std=gnu89 to clang.

Examples of using Clang
$ cat ~/t.c
typedef float V __attribute__((vector_size(16)));
V foo(V a, V b) { return a+b*a; }
Preprocessing:
$ clang ~/t.c -E
# 1 "/Users/sabre/t.c" 1

typedef float V __attribute__((vector_size(16)));

V foo(V a, V b) { return a+b*a; }
Type checking:
$ clang -fsyntax-only ~/t.c
GCC options:
$ clang -fsyntax-only ~/t.c -pedantic
/Users/sabre/t.c:2:17: warning: extension used
typedef float V __attribute__((vector_size(16)));
                ^
1 diagnostic generated.
Pretty printing from the AST:
Note, the -cc1 argument indicates the compiler front-end, and not the driver, should be run. The compiler front-end has several additional Clang specific features which are not exposed through the GCC compatible driver interface.

$ clang -cc1 ~/t.c -ast-print
typedef float V __attribute__(( vector_size(16) ));
V foo(V a, V b) {
   return a + b * a;
}
Code generation with LLVM:
$ clang ~/t.c -S -emit-llvm -o -
define <4 x float> @foo(<4 x float> %a, <4 x float> %b) {
entry:
         %mul = mul <4 x float> %b, %a
         %add = add <4 x float> %mul, %a
         ret <4 x float> %add
}
$ clang -fomit-frame-pointer -O3 -S -o - t.c # On x86_64
...
_foo:
Leh_func_begin1:
	mulps	%xmm0, %xmm1
	addps	%xmm1, %xmm0
	ret
Leh_func_end1:
